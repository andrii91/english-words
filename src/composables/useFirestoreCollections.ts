import { db } from "../../firebase";
import { collection, getDoc, setDoc, updateDoc, doc, addDoc, getDocs } from "firebase/firestore";
import { ref } from "vue";
import type { WordType } from "../types/Word.types";

const metadataCollection = "metadata"; // –ö–æ–ª–µ–∫—Ü—ñ—è –¥–ª—è –º–µ—Ç–∞-–¥–∞–Ω–∏—Ö
const collectionsDoc = "collections";  // –î–æ–∫—É–º–µ–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–æ–ª–µ–∫—Ü—ñ–π

const collections = ref<string[]>([]);

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–µ–∫—Ü—ñ–π –∑ Firestore
const fetchCollections = async () => {
  try {
    const docRef = doc(db, metadataCollection, collectionsDoc);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      collections.value = Object.keys(docSnap.data());
    } else {
      console.log("–î–æ–∫—É–º–µ–Ω—Ç collections —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.");
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–ª–µ–∫—Ü—ñ–π:", error);
  }
};

// üîπ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∫–æ–ª–µ–∫—Ü—ñ—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç `collections`
const addCollection = async (name: string) => {
  try {
    const docRef = doc(db, metadataCollection, collectionsDoc);
    const docSnap = await getDoc(docRef);

    if (!docSnap.exists()) {
      // –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
      await setDoc(docRef, { [name]: true });
    } else if (!docSnap.data()?.[name]) {
      // –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç —î, –∞–ª–µ –∫–æ–ª–µ–∫—Ü—ñ—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
      await updateDoc(docRef, { [name]: true });
    }

    collections.value.push(name);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó:", error);
  }
};

// üîπ –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å —É Firestore (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –∫–æ–ª–µ–∫—Ü—ñ—ó)
const addItem = async (data: any, _dbName: string = "words") => {
  try {
    await fetchCollections();
    await addCollection(_dbName);
    await addDoc(collection(db, _dbName), data);
    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–ø–∏—Å —É –∫–æ–ª–µ–∫—Ü—ñ—é: ${_dbName}`);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
  }
};

const getItems = async (_dbName:string = "words") => {
  const snapshot = await getDocs(collection(db, _dbName));
  return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as WordType[];
};

export function useFirestoreCollections() {
  return { collections, fetchCollections, addCollection, addItem, getItems };
}